#!/bin/bash
set -e;

# Check if name is specified
if [[ $1 == solr:* ]]; then
    if [[ -z $2 ]]; then
        if [[ "$1" != "solr:list" ]]; then
            echo "You must specify an app name"
            exit 1
        fi
    else
        APP="$2"
        # Check if app exists with the same name
        if [[ -d "$DOKKU_ROOT/$APP" ]]; then
            APP_EXISTS=true
        else
            APP_EXISTS=false
        fi
    fi
    if [[ ! -d "$PLUGIN_PATH/link" ]]; then
        if [[ -d "$PLUGIN_PATH/dokku-link" ]]; then
            echo "Found 'dokku-link/' directory but not a 'link/' directory. Did you install/clone dokku-link into the link/ directory instead? If so, please run"
            echo ""
            echo "    mv dokku-link link"
            echo ""
            echo "to fix it."
        else
            echo "Link plugin not found..."
            echo ""
            echo "Did you install it from https://github.com/rlaneve/dokku-link?"
            echo ""
            echo "Run these commands to install it:"
            echo ""
            echo "    cd /${PLUGIN_PATH}"
            echo "    sudo git clone https://github.com/rlaneve/dokku-link link"
            echo "    sudo dokku plugins-install"
        fi
        exit 1
    fi

    DOCKER_IMAGE=makuk66/docker-solr
    PLUGIN_NAME="solr"
    CONTAINER_NAME="${PLUGIN_NAME}/${APP}"
    SOLR_DATA_DIR="$DOKKU_ROOT/$APP/$PLUGIN_NAME"
    CONTAINER_DATA_DIR="/data/solr/shared"
    CONTAINER_CONFIG_DIR="/etc/solr"
    PORT_FILE="$SOLR_DATA_DIR/PORT"
    ENVVAR_NAME="SOLR_URL"
fi

if [[ ! -d "$DOKKU_ROOT/$APP/$PLUGIN_NAME" ]]; then
    mkdir -p "$DOKKU_ROOT/$APP/$PLUGIN_NAME"
    chown -R dokku: "$DOKKU_ROOT/$APP/$PLUGIN_NAME"
fi

case "$1" in
  solr:create)
    # Check if Solr container is installed
    IMAGE=$(docker images | grep ${DOCKER_IMAGE} | awk '{print $3}')
    if [[ -z $IMAGE ]]; then
        echo "Solr image not found... Did you run 'dokku plugins-install' ?"
        exit 1
    fi

    # Stop existing container with the same persistent Solr
    ID=$(docker ps | grep "$CONTAINER_NAME" | awk '{print $1}')
    if [[ ! -z "$ID" ]]; then
        docker stop $ID > /dev/null
    fi

    # Check if an existing DB volume exists
    DATA_VOLUME="$DOKKU_ROOT/$APP/$PLUGIN_NAME/volumes/data"
    if [[ ! -f "$DATA_VOLUME" ]]; then
        mkdir -p "$DATA_VOLUME"
        chown -R dokku: "$DATA_VOLUME"
    fi

    # Fork DB image
    echo "Running parent image"
    ID=$(docker run -d $DOCKER_IMAGE /bin/bash -c "exit 0")
    docker wait $ID > /dev/null
    echo "Committing image"
    IMAGE=$(docker commit $ID)
    docker tag $IMAGE $CONTAINER_NAME
    # Launch container
    ID=$(docker run -v "$DATA_VOLUME:$CONTAINER_DATA_DIR" -p 9200 -d $CONTAINER_NAME /bin/bash -c "cd /opt/solr/example; java -jar start.jar")
    sleep 4

    # Write port for further usage
    PORT=$(docker port $ID 9200 | sed 's/0.0.0.0://')
    echo $PORT > "$PORT_FILE"

    # Link to a potential existing app
    echo "Linking"
    dokku solr:link $APP $APP
    echo
    echo "-----> Solr container created: $CONTAINER_NAME"
    sleep 1
    dokku solr:info $APP
    ;;

  solr:delete)
    ID=$(docker ps -a | grep "$CONTAINER_NAME:latest" |  awk '{print $1}')
    # Stop and remove the container
    if [[ ! -z $ID ]]; then
        docker stop $ID > /dev/null
        sleep 1
        docker rm -v $ID > /dev/null
        sleep 1
    fi
    # Remove image
    IMAGE=$(docker images | grep "$CONTAINER_NAME" | awk '{ print $1 }')
    if [[ ! -z $IMAGE ]]; then
        docker rmi $IMAGE > /dev/null
    fi
    if [[ -d "$DOKKU_ROOT/$APP/$PLUGIN_NAME/volumes" ]]; then
        rm -rf "$DOKKU_ROOT/$APP/$PLUGIN_NAME/volumes"
    fi

    # unlink this container as "solr"
    dokku config:unset "$APP" $ENVVAR_NAME

    echo
    echo "-----> Solr container deleted: $CONTAINER_NAME"
    ;;

  solr:info)
    ID=$(docker ps -a | grep "$CONTAINER_NAME" | awk '{ print $1 }')
    IP=$(docker inspect $ID | grep IPAddress | cut -d '"' -f 4)

    echo
    echo "       Host: ${IP}"
    echo "       Private ports: 9200, 9300"
    echo
    ;;

  solr:link)
    if $APP_EXISTS; then
        # Check argument
        if [[ -z $3 ]]; then
            echo "You must specify a container name"
            exit 1
        fi
        CONTAINER_NAME="${PLUGIN_NAME}/$APP"

        # Link this container as "solr"
        dokku link:create "$APP" "$CONTAINER_NAME" "$PLUGIN_NAME"

        PORT=$(cat "$PORT_FILE")
        ID=$(docker ps -a | grep "$CONTAINER_NAME" | awk '{ print $1 }')
        IP=$(docker inspect $ID | grep IPAddress | cut -d '"' -f 4)
        # Link database using dokku command
        dokku config:set $APP $ENVVAR_NAME="http://solr:9200"
        echo
        echo "-----> $APP linked to $CONTAINER_NAME database"
    fi
    ;;

  solr:list)
    echo Solr containers:
    ls -d ${DOKKU_ROOT}/*/${PLUGIN_NAME} 2>/dev/null | sed "s|${DOKKU_ROOT}/\(.*\)/${PLUGIN_NAME}\$|  - \1|"
    ;;

  solr:logs)
    IDS=$(docker ps -a | grep "$CONTAINER_NAME" |  awk '{print $1}')
    for ID in $IDS; do
        docker logs $ID | tail -n 100
    done
    ;;

  help)
    cat && cat<<EOF
    solr:list                                       List all Solr containers
    solr:create <app>                               Create a Solr container
    solr:delete <app>                               Delete specified Solr container
    solr:info <app>                                 Display container informations
    solr:link <app> <container>                     Link an app to a Solr container
    solr:logs <app>                                 Display last logs from Solr container
EOF
    ;;

esac
